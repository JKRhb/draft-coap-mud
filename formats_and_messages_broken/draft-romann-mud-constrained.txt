



Network Working Group                                     J. Romann, Ed.
Internet-Draft                                             H. Damer, Ed.
Intended status: Informational                        UniversitÃ¤t Bremen
Expires: 28 August 2023                                 24 February 2023


                 Using MUD in Constrained Environments
                  draft-romann-mud-constrained-latest

Abstract

   This document specifies additional ways for discovering and emitting
   Manufacturer Usage Descriptions (MUD), especially in constrained
   environments, utilizing the Constrained Application Protocol (CoAP).

   TODO: Should be updated.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-romann-mud-constrained/.

   Source for this draft and an issue tracker can be found at
   https://github.com/namib-project/draft-coap-mud.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 August 2023.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.   Introduction and Overview
     1.1.  Terminology
   2.  Architecture
   3.  General Considerations
     3.1.  MUD-URL CoAP Submission Flows
       3.1.1.  Using the MUD-URL Resource (Receiver-initiated)
       3.1.2.  Using the MUD-URL Submission Resource (Thing-initiated)
     3.2.  MUD CoAP Payloads
       3.2.1.  Plain URL
       3.2.2.  MUD-URLs inside of CBOR Web Tokens
     3.3.  MUD CoAP Payloads
       3.3.1.  Plain URL
       3.3.2.  MUD-URLs inside of CBOR Web Tokens
     3.4.  Resource Discovery
       3.4.1.  Well-known URI and Multicast Addresses
       3.4.2.  CoRE Link Format and CoRE Resource Directories
   4.  Obtaining a MUD URL in Constrained Environments
     4.1.  Thing Behavior
     4.2.  Receiver Behavior
       4.2.1.  Discovery
       4.2.2.  MUD-URL Submission Resource
       4.2.3.  MUD-URL Resource
       4.2.4.  MUD-URL Payload
   5.   Security Considerations
   6.  IANA Considerations
     6.1.  Well-Known 'mud-url' URI
     6.2.  Well-Known 'mud-file' URI
     6.3.  New 'mud' Relation Type
     6.4.  Media Types Registry
     6.5.  CoAP Content-Format Registry
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.   Introduction and Overview

   Manufacturer Usage Descriptions (MUDs) have been specified in
   [RFC8520].  As the RFC states, the goal of MUD is to provide a means
   for end devices to signal to the network what sort of access and
   network functionality they require to properly function.

   While [RFC8520] contemplates the use of CoAP-related [RFC7252]
   policies, the MUD URL discovery methods it specifies (DHCP/DHCPv6,
   LLDP, and X.509 certificates) are not well-suited for constrained
   environments (e.g., 802.15.4 networks using 6LoWPAN and SLAAC).

   Therefore, this document introduces a number of additional ways for
   distributing MUD URLs -- such as well-known URIs and parameters for
   the CoRE Link-Format -- which are better suited for constrained
   devices.  Furthermore, using CBOR Web Tokens (CWTs), Things can
   distribute a signed MUD URL which allows MUD managers to better
   validate the authenticity of both the URL itself and the associated
   MUD file.

   The rest of this document is structured as follows: ... TODO

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Building upon the terminology defined in [RFC8520], this
   specification introduces the following additional terms:

   TODO.  (Remove if there are no additional terms.)

2.  Architecture

   Building upon the MUD architecture specified in [RFC8520], there are
   two main network components relevant for this document: The _Thing_
   that wants to obtain network access via a Router or Switch, and the
   _MUD Manager_ that processes MUD URLs, retrieves MUD files from the
   MUD file server, and configures other network components accordingly.
   Both the Thing and the MUD manager can play more active roles when
   using CoAP [RFC7252] for exposing and discovering MUD URLs.

   A general overview of the MUD architecture adjusted for using CoAP in
   a constrained environment can be seen in Figure 1.  Here, we can see
   that both the Thing and the MUD manager (as the recipient of the MUD
   URLs) may initiate the MUD discovery process: The Thing can contact
   and register with MUD URL recipients, e.g. by sending a CoAP POST
   request via Multicast, addressing a well-known registration endpoint.
   Conversely, MUD recipients can initiate the discovery process, e.g.
   by sending a COAP GET request to a well-known URI via multicast.

   TODO: Refine diagram

            ...................................................
            .                                  ____________   .
            .                                 +            +  .
            .             +------------------ |    MUD     |  .
            .   get URL   |                   |  Manager   |  .
            .   (coaps)   |                   +____________+  .
            .  MUD file   |                         .         .
            .             |                         .         .
            .             |     End system network  .         .
            .             |                         .         .
            .           __v____                 _________     .
            .          +       + (DHCP et al.) + router  +    .
            .     +--- | Thing +---->MUD URL+->+   or    |    .
            .     |MUD +_______+               | switch  |    .
            .     |File  |                     +_________+    .
            .     +------+                                    .
            ...................................................

            Figure 1: Exposing and discovering MUD URLs via CoAP

   Optionally, Things may also provide additional means for proving the
   authenticity of the MUD URL associated with them.  For that purpose,
   this document specifies how to use CBOR Object Signing and Encryption
   (COSE) [RFC8152] objects to attach a manufacturer's signature to a
   MUD URL.  Using this additional feature, the MUD architecture is
   augmented once more, as visualized in Figure 2.

   TODO: Replace diagram

            ...................................................
            .                                  ____________   .
            .                                 +            +  .
            .             +------------------ |    MUD     |  .
            .   get URL   |                   |  Manager   |  .
            .   (coaps)   |                   +____________+  .
            .  MUD file   |                         .         .
            .             |                         .         .
            .             |     End system network  .         .
            .             |                         .         .
            .           __v____                 _________     .
            .          +       + (DHCP et al.) + router  +    .
            .     +--- | Thing +---->MUD URL+->+   or    |    .
            .     |MUD +_______+               | switch  |    .
            .     |File  |                     +_________+    .
            .     +------+                                    .
            ...................................................

                Figure 2: MUD Discovery using COSE objects.

   TODO: Add more architecture stuff here.

3.  General Considerations

   For this document, we focus on two mechanisms for exposing MUD URLs
   in a constrained network: On the one hand, Things can expose MUD-URLs
   as a dedicated CoAP resource.  This allows them to further secure the
   payload and provide additional authentication, e.g., by embedding the
   URL in a CBOR Web Token.  On the other hand, Things can include a MUD
   URL in a list of links, using, for example, the CoRE Link-Format.
   This Web Linking approach also allows Things to submit MUD URLs to a
   Directory Service.

   In the following, we will first outline these additional means for
   exposing MUD URLs before going into more detail regarding potential
   exposure and discovery flows.

3.1.  MUD-URL CoAP Submission Flows

   In general, this specification provides two ways by which a MUD-URL
   transmission can be performed using CoAP.

   In environments where many Things need to be managed over several
   subnets and where multicast usage is not desirable, it can be
   advantageous if the MUD receiver provides a CoAP resource to perform
   submissions to and the Things initiate the MUD-URL submission.  This
   will be referred to as the "Thing-initiated" submission flow for the
   remainder of this specification.

   Conversely, in environments where multicast is not an issue and
   things might be limited in their capabilities, it can be advantageous
   if MUD receivers retrieve the MUD-URL from a CoAP resource provided
   by the Things.  In this specification, this will be referred to as
   the "Receiver-initiated" submission flow.

3.1.1.  Using the MUD-URL Resource (Receiver-initiated)

   In the Receiver-initiated flow, Things provide a CoAP resource
   discoverable by the means provided in [REF] , which is then requested
   by MUD receivers to retrieve the MUD-URL.

   In general, the Receiver-initiated MUD-URL flow can be divided into
   these steps:

   1.  After joining the network, the Thing starts providing a CoAP
       resource to retrieve the MUD-URL.  This resource should provide
       the MUD-URL in one of the formats specified in [REF] . It also
       makes this resource discoverable for MUD receivers using the
       methods specified in [REF] .

   2.  The MUD Receiver discovers the resource using the aforementioned
       methods.  Depending on the method of discovery, this could for
       example happen using a periodic scan for devices, e.g., by
       periodically requesting a well-known URI using multicast.  Other
       methods of discovery might also provide a mechanism to directly
       notify the Receiver of new devices, in which case this method
       SHOULD be preferred over periodic scanning.

   3.  The MUD Receiver retrieves the discovered resource for devices
       where the MUD controller does not have an up-to-date MUD-URL
       stored.  To do so, it performs a CoAP request for the discovered
       MUD-URL resource URI using the GET method, which is responded to
       with the appropriate payload.  Receivers MUST specify the desired
       payload formats using the Accept option . If multiple payload
       formats are specified, the Thing MUST prefer ones that provide a
       greater degree of authenticity protection (i.e., prefer CWTs over
       plaintext transmission).

3.1.2.  Using the MUD-URL Submission Resource (Thing-initiated)

   In the Thing-initiated flow, Things discovery a submission resource
   provided by the MUD Receiver and submit their MUD-URLs to this
   resource.

   This flow can be divided into these general steps:

   1.  The MUD Receiver provides a CoAP resource that Things can submit
       their MUD-URLs to.  It also makes itself discoverable for Things
       using the methods specified in [REF] .

   2.  The Thing connects to the network.  After connecting, it
       discovers the MUD-URL submission resource using the
       aforementioned methods.

   3.  The Thing submits the MUD-URL to the previously discovered URI.
       To do so, it performs a CoAP request to the discovered URI with
       the POST method.  The MUD-URL is contained as the message payload
       in this request using one of the content formats defined in [REF]
       .

3.2.  MUD CoAP Payloads

   For the purposes of this specification, we will define two formats
   for transmitting MUD-URLs, which are suitable for different
   environments.  MUD Receivers that conform to this specification MUST
   support both formats.

3.2.1.  Plain URL

   The easiest method of transmitting MUD-URLs is using a plain text
   payload containing only the MUD-URL.  While this method has the
   advantage of simplicity, it does not contain any additional
   information that could be used by a MUD receiver to authenticate the
   supplied MUD-URL.

   CoAP requests and responses that use this format MUST use the
   Content-Format option with the value corresponding to the
   "application/mud-url+plain" media type.

3.2.2.  MUD-URLs inside of CBOR Web Tokens

   Previous methods of transmitting MUD-URLs do not allow for
   authentication of supplied MUD URLs.  To accomodate for environments
   where authentication of MUD-URLs is desired, it is also possible to
   include the MUD-URL as a claim inside of a CBOR Web Token [RFC8392].
   This allows for MUD receivers or MUD controllers to verify the
   authenticity of the provided MUD-URL.

   CBOR Web Tokens that contain MUD-URL information have the following
   properties: - The MUD-URL is contained as an ASCII-encoded string in
   the "mud-url" claim. - The Token MAY contain Proof-of-Possession
   claims [RFC8747].  If it does, the MUD receiver MUST verify that the
   device is in possession of the key specified in the cnf claim.  - The
   Token MAY contain an expiry time.  If an expiry time is specified,
   the MUD-URL should be resubmitted or requested again shortly before
   the original CWT expires.  Note that using an expiry time could cause
   problems if the device is unable to perform a refresh, e.g., due to a
   power outage.

   CoAP requests and responses that use this format MUST use the
   Content-Format option with the value corresponding to the
   "application/mud-url+cwt" media type.

3.3.  MUD CoAP Payloads

   CoAP allows transmission of payloads in different formats.For the
   purposes of this specification, we will define two formats for
   transmitting MUD-URLs, which are suitable for different environments.
   MUD receivers that conform to this specification MUST support both
   formats.

3.3.1.  Plain URL

   The easiest method of transmitting MUD-URLs is using a plain text
   payload containing only the MUD-URL.  While this method has the
   advantage of simplicity, it does not contain any additional
   information that could be used by a MUD receiver to authenticate the
   supplied MUD-URL.

   CoAP requests and responses that use this format MUST use the
   Content-Format option with the value corresponding to the
   "application/mud-url+plain" media type.

3.3.2.  MUD-URLs inside of CBOR Web Tokens

   Previous methods of transmitting MUD-URLs do not allow for
   authentication of supplied MUD URLs.  To accomodate for environments
   where authentication of MUD-URLs is desired, it is also possible to
   include the MUD-URL as a claim inside of a CBOR Web Token [RFC8392].
   This allows for MUD receivers or MUD controllers to verify the
   authenticity of the provided MUD-URL.

   CBOR Web Tokens that contain MUD-URL information have the following
   properties: - The MUD-URL is contained as an ASCII-encoded string in
   the "mud-url" claim. - The Token MAY contain Proof-of-Possession
   claims [RFC8747].  If it does, the MUD receiver MUST verify that the
   device is in possession of the key specified in the cnf claim.  - The
   Token MAY contain an expiry time.  If an expiry time is specified,
   the MUD-URL should be resubmitted or requested again shortly before
   the original CWT expires.  Note that using an expiry time could cause
   problems if the device is unable to perform a refresh, e.g., due to a
   power outage.

   CoAP requests and responses that use this format MUST use the
   Content-Format option with the value corresponding to the
   "application/mud-url+cwt" media type.

3.4.  Resource Discovery

   In this section, additional methods for resource discovery in
   constrained environments are defined.

3.4.1.  Well-known URI and Multicast Addresses

   This document introduces a new well-known URI for discovering MUD
   URLs directly: /.well-known/mud-url.

   /.well-known/mud-url MAY be used to expose a URL pointing to a MUD
   file hosted by an external MUD file server.  This MUD file MUST
   describe the device the URL was retrieved from or is referring to
   within a list of CoRE links.

   [RFC7252] registers one IPv4 and one IPv6 address each for the
   purpose of CoAP multicast.  In addition to these already existing
   "All CoAP Nodes" multicast addresses, this document defines
   additional "All MUD CoAP Nodes" multicast addresses that can be used
   to address only the subset of CoAP Nodes that support MUD.  If a
   device exposes a MUD URL via CoAP, it SHOULD join the respective
   multicast groups for the IP versions it supports.

3.4.2.  CoRE Link Format and CoRE Resource Directories

   Resources which either host MUD URLs or MUD files MAY be indicated
   using the CoRE Link Format [RFC6690].  For this purpose, additional
   link parameters are defined: With the link relation-types mud-file
   and mud-url, a link MAY be annotated as pointing to a MUD file or a
   MUD URL, respectively.  Note that the use of these relation-types is
   not limited to constrained environments and can also be used to
   annotate links in other contexts, such as a Web of Things Thing
   Description [W3C.wot-thing-description11].

   MUD Managers or other devices can send a GET requests to a CoAP
   server for /.well-known/core and get in return a list of hypermedia
   links to other resources hosted in that server, encoded using the
   CoRE Link-Format [RFC6690].  Among those, it will get the path to the
   resource exposing the MUD URL, for example /.well-known/mud-url and
   link relation-types like rel=mud-url.

   By using CoRE Resource Directories [RFC9176], devices can register a
   MUD file or MUD URL and use the directory as a MUD repository, making
   it discoverable with the usual RD Lookup steps.  A MUD manager itself
   MAY also act as a Resource Directory, directly applying the policies
   from registered MUD files to the network.  In addition to the
   registration endpoint defined in [RFC9176], MUD managers MAY define a
   separate registration interface when acting as a CoRE RD.

4.  Obtaining a MUD URL in Constrained Environments

   With the additional mechanisms for finding MUD URLs introduced in
   this document, MUD managers can be configured to play a more active
   role in discovering MUD-enabled devices.  Furthermore, IoT devices
   could identify their peers based on a MUD URL associated with these
   devices or perform a configuration process based on the linked MUD
   file's contents.  However, the IoT devices themselves also have more
   options for exposing their MUD URLs more actively, using, for
   instance, a MUD manager's registration interface.

   In the remainder of this section, we will outline potential use-cases
   and procedures for obtaining a MUD URL with the additional mechanisms
   defined above.

4.1.  Thing Behavior

   *  Exposition/Announcing

      -  (same as General Architecture/Discovery)

   *  Providing the MUD-URL Resource

      -  (guidance for Content Format, static pre-generation(?), etc.)

4.2.  Receiver Behavior

   MUD receivers are assumed to be mostly non-constrained devices.
   Accordingly, this specification puts most of the implementation
   burden regarding support for flows and formats on the receivers,
   while keeping the requirements for Things as small as possible.  In
   general, it is recommended that MUD receivers support as much of the
   specification as possible in order to support as many different
   Things as possible.

4.2.1.  Discovery

   For the discovery process described in Section 3.4, the following
   considerations apply to MUD receivers:

   *  MUD receivers MUST regularly perform a CoAP request to the "All
      MUD CoAP Nodes" multicast address for the /.well-known/mud-url URI

   *  MUD receivers MUST regularly query any CoRE Resource Directories
      relevant for the subnet they are responsible for

   *  MUD receivers MUST register their submission resource to any CoRE
      Resource Directories relevant for the subnet they are responsible
      for

4.2.2.  MUD-URL Submission Resource

   *  MUD receivers MUST provide a submission resource

   *  MUD receivers MAY indicate failure of MUD-URL submission using a
      CoAP Error Code

4.2.3.  MUD-URL Resource

   *  MUD receivers MUST request MUD-URLs known to them

   *  MUD receivers MUST re-request MUD-URLs submitted as a CWT claim if
      the CWT has an expiry time that passed

4.2.4.  MUD-URL Payload

   *  MUD receivers SHOULD treat devices for which MUD-URL retrieval
      failed as devices the same way as devices that do not provide a
      MUD-URL at all.

   *  MUD receivers MUST support the plain MUD-URL payload

   *  MUD receivers SHOULD support the CWT MUD-URL claim

   *  If the CWT claim is supported, MUD receivers MUST be configured
      with a policy as to which signers are authorized to sign tokens

5.   Security Considerations

   TBD.

   TODO: Mention something about signing MUD files and MUD URLs using
   JOSE and -- in the long run -- COSE.  (TBD: Is JOSE even relevant for
   this document?)

   *  MUD-URL COSE Object Lifetime, Key Type (PKI/RPK), Contained
      Information (MAC-Address?)

   *  Multicast Considerations (DoS prevention)

6.  IANA Considerations

   *  CoAP Resource Media Types Registry

   *  CoAP Content Format Registry

   *  well-known URI Registry

   *  IPv6 Multicast Address Registry

6.1.  Well-Known 'mud-url' URI

6.2.  Well-Known 'mud-file' URI

6.3.  New 'mud' Relation Type

6.4.  Media Types Registry

   *  application/mud+cbor?

6.5.  CoAP Content-Format Registry

   *  application/mud+json

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
              <https://www.rfc-editor.org/rfc/rfc6690>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7252>.

   [RFC8152]  Schaad, J., "CBOR Object Signing and Encryption (COSE)",
              RFC 8152, DOI 10.17487/RFC8152, July 2017,
              <https://www.rfc-editor.org/rfc/rfc8152>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8392]  Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", RFC 8392, DOI 10.17487/RFC8392,
              May 2018, <https://www.rfc-editor.org/rfc/rfc8392>.

   [RFC8520]  Lear, E., Droms, R., and D. Romascanu, "Manufacturer Usage
              Description Specification", RFC 8520,
              DOI 10.17487/RFC8520, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8520>.

   [RFC8747]  Jones, M., Seitz, L., Selander, G., Erdtman, S., and H.
              Tschofenig, "Proof-of-Possession Key Semantics for CBOR
              Web Tokens (CWTs)", RFC 8747, DOI 10.17487/RFC8747, March
              2020, <https://www.rfc-editor.org/rfc/rfc8747>.

7.2.  Informative References

   [RFC9176]  AmsÃ¼ss, C., Ed., Shelby, Z., Koster, M., Bormann, C., and
              P. van der Stok, "Constrained RESTful Environments (CoRE)
              Resource Directory", RFC 9176, DOI 10.17487/RFC9176, April
              2022, <https://www.rfc-editor.org/rfc/rfc9176>.

   [W3C.wot-thing-description11]
              "Web of Things (WoT) Thing Description 1.1", W3C CR wot-
              thing-description11, W3C wot-thing-description11,
              <https://www.w3.org/TR/wot-thing-description11/>.

Acknowledgments

   We would like to thank Jaime JimÃ©nez for allowing us to build upon
   his draft draft-jimenez-t2trg-mud-coap-00 for creating an initial
   version of this document.

Authors' Addresses

   Jan Romann (editor)
   UniversitÃ¤t Bremen
   Germany
   Email: jan.romann@uni-bremen.de


   Hugo Hakim Damer (editor)
   UniversitÃ¤t Bremen
   Germany
   Email: hdamer@uni-bremen.de
